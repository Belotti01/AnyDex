@inherits BaseDbComponent<ResourceEditor>

@if(Resource is null || _isLoading) {
	<_LoadingBar />
}else {
	<AuthorizeView Context="auth">
		<Authorized>
			<_MudWrap Type="MudWrapType.Primary">
				<MudCardContent>
					<EditForm Model="Resource">
						<DataAnnotationsValidator />

						<_MudGridTemplate Type="GridType.Wide">
							<!-- Top-Left Column -->
							<_MudItemTemplate Sizes="new int[] {12, 11, 6}">
								<ImageUrlInputField @bind-Value="@Resource.ImageUrl"/>
							</_MudItemTemplate>

							<!-- Top-Right Column -->
							<_MudItemTemplate Sizes="new int[] {12, 11, 6}">
								<MudStack AlignItems="AlignItems.Center"
										  Spacing="2"
										  Justify="Justify.Center">
									<MudInput @bind-Value="@Resource.Title" 
											  Label="@Local["Title"]" />
									<MudInput @bind-Value="@Resource.Summary" 
											  Label="@Local["Summary"]"
											  Lines="8"/>
								</MudStack>
							</_MudItemTemplate>
						</_MudGridTemplate>
					</EditForm>
				</MudCardContent>
			</_MudWrap>
		</Authorized>

		<NotAuthorized>
			<UnauthorizedView />
		</NotAuthorized>

	</AuthorizeView>
}



@code {
	[Parameter]
	public int ResourceId { get; set; } = 0;
	protected Resource? Resource { get; set; }
	protected bool _isLoading = true;

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		// If a resource ID was specified, look for the tied resource
		if(ResourceId > 0) {
			Resource = DbContext.Resources.FirstOrDefault(x => x.Id == ResourceId);
		}

		if(Resource is null) {
			// The resource was not found or no ID was specified
			if(ResourceId != 0) {
				Snackbar.AddError("Resource does not exist. A new one will be created.");
			}
			Resource = new();
			await DbContext.AddAsync(Resource);
		}
		_isLoading = false;
	}
}
