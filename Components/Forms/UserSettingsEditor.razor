@using System.ComponentModel.DataAnnotations
@inherits BaseDbComponent<UserSettingsEditor>

@if(CurrentUser is not null) {
	<MudTabs >
		<!-- PROFILE -->
		<MudTabPanel Text="Profile">
			<EditForm Class="pa-4" Model="CurrentUser" OnValidSubmit="SubmitProfile" OnInvalidSubmit="OnInvalidSubmit">
				<DataAnnotationsValidator />
				<MudCard>
					<MudCardContent>
						<_MudDynamicColumns>
							<LeftColumn>
								<ImageUrlInputField DefaultValue="@PLACEHOLDER_PROFILE_PICTURE"
													HelperText="Link the image you want to use as Profile Picture here"
													@bind-Value="@CurrentUser.ProfilePicture"
													Title="Profile Picture"/>
								<MudTextField ReadOnly 
											  Label="Username" 
											  @bind-Value="CurrentUser.UserName" 
											  For="() => CurrentUser.UserName" />
								<MudTextField Label="Full Name" 
											  @bind-Value="CurrentUser.FullName" 
											  For="() => CurrentUser.FullName" />
							</LeftColumn>
							
							<RightColumn>
								<MudTextField Label="Bio" 
												@bind-Value="CurrentUser.Bio" 
												Lines="16" 
												Variant="Variant.Outlined" 
												For="() => CurrentUser.Bio" 
												MaxLength="1000"
												Counter="1000" 
												Immediate/>
							</RightColumn>
						</_MudDynamicColumns>
					</MudCardContent>
					<MudCardActions>
						<MudButton Class="d-block mx-auto" ButtonType="ButtonType.Submit">Save Changes</MudButton>
					</MudCardActions>
				</MudCard>
			</EditForm>
		</MudTabPanel>
			
		<!-- ACCOUNT -->
		<MudTabPanel Text="Account">
			<UserPasswordEditor @bind-Value="@CurrentUser"/>
		</MudTabPanel>
	</MudTabs>
}

@code {
	private const string PLACEHOLDER_PROFILE_PICTURE = "https://www.datacomplianceeurope.eu/wp-content/uploads/2016/12/logo-placeholder.png";

	protected User? CurrentUser { get; set; }
	protected bool IsProfilePictureSet => !string.IsNullOrEmpty(CurrentUser?.ProfilePicture);

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		CurrentUser = await GetCurrentUserAsync();
	}

	protected void OnInvalidSubmit(EditContext context) {
		// Input errors should be displayed in the form - this is just for debugging
		#if DEBUG
	Snackbar.AddWarning("Fix errors and retry.");
	Logger.LogDebug($"InvalidSubmit event called on page {nameof(UserSettingsEditor)}");
		#endif
	}

	protected async Task<int> SubmitProfile(EditContext context) {
		DbContext.Entry(CurrentUser!).DetectChanges();
		int result = await DbContext.SaveChangesAsync();

		if(result > 0) {
			Snackbar.AddSuccess("Profile has been changed.");
		}else if(result < 0) {
			Snackbar.AddError("Changes could not be applied. Please try again later.");
		}
		// If result is 0, no changes were made

		return result;
	}

	protected void UpdateProfilePicture() {
		base.StateHasChanged();
	}
}
