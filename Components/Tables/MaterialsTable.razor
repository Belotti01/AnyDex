@inherits BaseDbComponent<MaterialsTable>

<_MudWrap Type="MudWrapType.Primary">
    @if(_isLoading || Materials is null) {
		<MudProgressLinear Indeterminate/>
    }else {
		<MudDataGrid Items="Materials" 
					 Context="material"
					 Filterable
					 Sortable
					 Loading="_isLoading"
					 RowsPerPage="15"
					 ReadOnly="@ReadOnly"
					 EditDialogOptions="new() {NoHeader=true}"
					 EditMode="DataGridEditMode.Form"
					 EditTrigger="DataGridEditTrigger.OnRowClick">
				<Columns>
					<Column T="Material" Field="@nameof(Material.Title)" Title="@Local["Title"]" Groupable="true"/>
					<Column T="Material" Field="@nameof(Material.Owner)" Title="@Local["Creator"]" Groupable="true"/>
					<Column T="Material" Context="column" Field="@nameof(Material.ReleaseDate)" Title="@Local["ReleaseDate"]" Hideable="true">
						<CellTemplate>@(column.Item.ReleaseDate.HasValue ? column.Item.ReleaseDate.Value.ToString("dd/MM/yyyy") : "")</CellTemplate>	
						<EditTemplate><_MudDatePicker @bind-Date="column.Item.ReleaseDate" Label="@Local["ReleaseDate"]"/></EditTemplate>
					</Column>
					<Column T="Material" Context="column" Sortable="false" Hideable="true" Title="@Local["Type"]" >
						<CellTemplate>@Local[column.Item.Type.ToText()]</CellTemplate>
						<EditTemplate><MudMaterialTypeComboBox @bind-Value="@column.Item.Type" /></EditTemplate>
					</Column>
				
					<!-- Show the LENGTH field, plus the progress alongside of it if the user is logged in -->
					<AuthorizeView>
						<Authorized>
							<Column T="Material" Context="column" Title="@Local["Progress"]" SortBy="(x) => x.Length" Hideable="true" >
								<CellTemplate>
									@Local[GetProgressText(column.Item)]
								</CellTemplate>
								<EditTemplate>
									<MudNumericField @bind-Value="@column.Item.Length" Label="@Local["Length"]" Variant="Variant.Outlined" />
								</EditTemplate>
							</Column>
						</Authorized>
						<NotAuthorized>
							<Column T="Material" Field="@nameof(Material.Length)" Title="@Local["Length"]" Hideable="true" />
						</NotAuthorized>
					</AuthorizeView>
				
					<!-- Edit-Only Columns -->
					<Column T="Material" Hidden="true" Hideable="false" Field="@nameof(Material.Description)" Context="column">
						<EditTemplate>
							<MudTextField Lines="8" @bind-Value="@column.Item.Description" Label="@Local["Description"]" Variant="Variant.Outlined"/>
						</EditTemplate>
					</Column>
				</Columns>
				<PagerContent>
					<_MudGridPager TItem="Material"/>
				</PagerContent>
		</MudDataGrid>
	}
</_MudWrap>

@code {
	[Parameter]
	public bool ReadOnly { get; set; } = false;
	[Parameter]
	public IEnumerable<Material>? Materials { get; set; }
	protected User? CurrentUser { get; set; }

	protected bool _isLoading = true;
	protected Task? _backgroundTask;

	protected override void OnInitialized() {
		base.OnInitialized();

		_backgroundTask = new(async() => await LoadData());
		_backgroundTask.AndForget();
		_backgroundTask.Start();
	}

	protected async Task LoadData() {
		Materials ??= DbContext.Materials;
		_isLoading = false;
		await InvokeAsync(() => StateHasChanged());
	}

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		CurrentUser = await GetCurrentUserAsync();
	}

	protected string GetProgressText(Material material) {
		if(CurrentUser is null)
			return material.Length.ToString();

		Progress? progress = CurrentUser.Progresses.FirstOrDefault(x => x.MaterialId == material.Id);
		uint progressValue = progress?.Value ?? 0;

		return $"{progressValue}/{material.Length}";
	}
}
