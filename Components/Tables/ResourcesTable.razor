@inherits BaseDbComponent<ResourcesTable>

<_MudWrap Type="MudWrapType.Primary">
    @if(_isLoading || Materials is null) {
		<MudProgressLinear Indeterminate/>
    }else {
		<MudDataGrid Items="Materials" 
					 Context="resource"
					 Filterable
					 Sortable
					 Loading="_isLoading"
					 RowsPerPage="15"
					 ReadOnly="false"
					 EditDialogOptions="new() {NoHeader=true}"
					 EditMode="DataGridEditMode.Form"
					 EditTrigger="DataGridEditTrigger.OnRowClick">
				<Columns>
					<Column T="Resource" Field="@nameof(Resource.Title)" Title="@Local["Title"]" Groupable="true" Context="column" />
					<Column T="Resource" Field="@nameof(Resource.Creator)" Title="@Local["Creator"]" Groupable="true"/>
					<Column T="Resource" Context="column" Field="@nameof(Resource.ReleaseDate)" Title="@Local["ReleaseDate"]" Hideable="true">
						<CellTemplate>@(column.Item.ReleaseDate.HasValue ? column.Item.ReleaseDate.Value.ToString("dd/MM/yyyy") : "")</CellTemplate>	
						<EditTemplate><_MudDatePicker @bind-Date="column.Item.ReleaseDate" Label="@Local["ReleaseDate"]"/></EditTemplate>
					</Column>
					<Column T="Resource" Context="column" SortBy="x => x.Materials.Count" Hideable="true" Title="@Local["Materials"]" IsEditable="false">
						<CellTemplate>
							<MudButton EndIcon="@Icons.Material.Filled.MenuOpen" OnClick="(e) => OpenMaterialsDialog(column.Item)">
								@column.Item.Materials.Count
							</MudButton>
						</CellTemplate>
					</Column>
					<!-- Columns visible only by logged users -->
					<AuthorizeView>
						<Authorized>
							<Column T="Resource" Context="column" Title="Status" Sortable="false" Groupable="true" GroupBy="x => GetUserProgressStatus(x)" IsEditable="false">
								<CellTemplate>
									<MudIconButton Icon="@Icons.Material.Filled.Edit" />
										@(GetUserProgressStatus(column.Item).ToText())
								</CellTemplate>
							</Column>
							<Column T="Resource" Context="column" Title="" Sortable="false" IsEditable="false">
								<CellTemplate>
									<MudToggleIconButton Toggled="_bookmarkedResourceIds?.Contains(column.Item.Id) ?? false"
														 ToggledChanged="(bool newValue) => ToggleBookmark(column.Item)"
														 Icon="@Icons.Material.Filled.BookmarkBorder"
														 ToggledIcon="@Icons.Material.Filled.Bookmark" />
								</CellTemplate>
							</Column>
						</Authorized>
					</AuthorizeView>
				</Columns>
				<PagerContent>
					<_MudGridPager TItem="Resource"/>
				</PagerContent>
		</MudDataGrid>
	}
</_MudWrap>


@code {
	protected readonly int[] _pageSizeOptions = new int[] { 5, 15, 25, 50 };
	[Parameter]
	public IEnumerable<Resource>? Materials { get; set; }
	public IEnumerable<Material>? Material { get; set; }
	public User? CurrentUser { get; set; }

	public string? CurrentResourceTitle { get; protected set; }
	protected SortedSet<ulong>? _bookmarkedResourceIds;
	protected int _currentTabIndex = 0;
	protected ulong _currentMaterialResourceId = 0;
	protected BookmarkManager? _bookmarkManager;
	protected bool _isLoading = true;
	protected Task? _backgroundLoader;

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		// If no Resources are specified, load all of them.
		CurrentUser = await GetCurrentUserAsync();
		Materials ??= DbContext.Resources;
		_bookmarkManager = new();
		LoadBookmarkedResources();
		_isLoading = false;
	}

	protected void ToggleBookmark(Resource resource) {
		if(CurrentUser is null || _bookmarkedResourceIds is null) {
			return;
		}

		bool hasStateChanged;
		bool isBookmarked = _bookmarkedResourceIds.Contains(resource.Id);
		if(isBookmarked) {
			hasStateChanged = RemoveBookmark(resource);
		}else {
			hasStateChanged = AddBookmark(resource);
		}

		if(hasStateChanged) {
			DbContext.SaveChanges();
			StateHasChanged();
		}
	}

	protected bool RemoveBookmark(Resource resource) {
		if(_bookmarkManager is null) {
			return false;
		}

		bool removed = _bookmarkManager.TryRemove(CurrentUser!.Id, resource.Id);

		if(removed) {
			Snackbar.AddSuccess($"Bookmark removed from \"{resource.Title}\"");
			_bookmarkedResourceIds?.Remove(resource.Id);
		}else {
			Snackbar.AddWarning($"Bookmark could not be removed. Please try again later.");
		}

		return _bookmarkManager.SaveChanges();
	}

	protected bool AddBookmark(Resource resource) {
		if(_bookmarkManager is null) {
			return false;
		}

		bool added = _bookmarkManager.TryAdd(CurrentUser!.Id, resource.Id);

		if(added) {
			Snackbar.AddSuccess($"Bookmark added to \"{resource.Title}\"");
			_bookmarkedResourceIds?.Add(resource.Id);
		}else {
			Snackbar.AddWarning($"Bookmark could not be added. Please try again later.");
		}

		return _bookmarkManager.SaveChanges();
	}

	protected void LoadBookmarkedResources() {
		if(CurrentUser is null) {
			return;
		}
		_bookmarkedResourceIds = new(CurrentUser
			.Bookmarks
			.Select(x => x.ResourceId));
	}

	protected string GetBookmarkIcon(Resource resource) {
		return _bookmarkedResourceIds is not null
			&& _bookmarkedResourceIds.Contains(resource.Id)
				? Icons.Material.Filled.Bookmark
				: Icons.Material.Outlined.BookmarkBorder;
	}

	protected ProgressStatus GetUserProgressStatus(Resource resource) {
		var progress = CurrentUser?.Progresses.FirstOrDefault(x => x.MaterialId == resource.Id);

		if(progress is null)
			return ProgressStatus.None;
		return progress.Status;
	}

	protected void OpenMaterialsDialog(Resource resource) {
		DialogParameters parameters = new() {
			{ nameof(MaterialsDialog.Materials), resource.Materials }
		};
		ShowDialog<MaterialsDialog>("Materials", MaxWidth.Large, parameters);
	}
}
