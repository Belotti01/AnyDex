@inherits BaseDbComponent<ResourcesTable>

<MudWrap Type="MudWrapType.Primary">
	<MudDataGrid Items="Resources" 
				 Context="resource"
				 Filterable
				 Sortable
				 Loading="_isLoading">
			<Columns>
				<Column T="Resource" Field="@nameof(Resource.Title)" Groupable="true"/>
				<Column T="Resource" Field="@nameof(Resource.Creator)" Groupable="true"/>
				<Column T="Resource" Field="@nameof(Resource.ReleaseDate)" Hideable="true" Title="Release Date"/>
				<Column T="Resource" Context="column" SortBy="x => x.Materials.Count" Hideable="true" Title="Materials">
					<CellTemplate>
						@column.Item.Materials.Count
					</CellTemplate>
				</Column>
				<!-- Columns visible only by logged users -->
				<AuthorizeView>
					<Authorized>
						<Column T="Resource" Context="column" Title="Status" Sortable="false" Groupable="true" GroupBy="x => GetUserProgressStatus(x)">
							<CellTemplate>
								<MudIconButton Icon="@Icons.Material.Filled.Edit" />
									@(GetUserProgressStatus(column.Item).ToText())
							</CellTemplate>
						</Column>
						<Column T="Resource" Context="column" Title="" Sortable="false" >
							<CellTemplate>
								<MudToggleIconButton Toggled="_bookmarkedResourceIds?.Contains(column.Item.Id) ?? false"
													 ToggledChanged="(bool newValue) => ToggleBookmark(column.Item)"
													 Icon="@Icons.Material.Filled.BookmarkBorder"
													 ToggledIcon="@Icons.Material.Filled.Bookmark" />
							</CellTemplate>
						</Column>
					</Authorized>
				</AuthorizeView>
			</Columns>
	</MudDataGrid>
</MudWrap>


@code {
	protected readonly int[] _pageSizeOptions = new int[] { 15, 25, 50 };
	[Parameter]
	public IEnumerable<Resource>? Resources { get; set; }
	public IEnumerable<Material>? Material { get; set; }
	public User? CurrentUser { get; set; }

	public string? CurrentResourceTitle { get; protected set; }
	protected SortedSet<ulong>? _bookmarkedResourceIds;
	protected int _currentTabIndex = 0;
	protected ulong _currentMaterialResourceId = 0;
	protected BookmarkManager? _bookmarkManager;
	protected bool _isLoading = true;
	protected Task? _backgroundLoader;

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		// If no Resources are specified, load all of them.
		CurrentUser = await GetCurrentUserAsync();
		_backgroundLoader = new(LoadData);
		_backgroundLoader.AndForget();
		_backgroundLoader.Start();
	}

	protected void LoadData() {
		Resources ??= DbContext.Resources;
		_bookmarkManager = new();
		LoadBookmarkedResources();
		_isLoading = false;
	}

	protected void OpenMaterialTab(Resource resource) {
		Material = null;
		_currentTabIndex = 1;
		// If the material list is already loaded, don't bother refreshing it
		if(_currentMaterialResourceId != resource.Id) {
			CurrentResourceTitle = resource.Title;
			Material = resource.Materials;
		}
	}

	protected void ToggleBookmark(Resource resource) {
		if(CurrentUser is null || _bookmarkedResourceIds is null) {
			return;
		}

		bool hasStateChanged;
		bool isBookmarked = _bookmarkedResourceIds.Contains(resource.Id);
		if(isBookmarked) {
			hasStateChanged = RemoveBookmark(resource);
		}else {
			hasStateChanged = AddBookmark(resource);
		}

		if(hasStateChanged) {
			DbContext.SaveChanges();
			StateHasChanged();
		}
	}

	protected bool RemoveBookmark(Resource resource) {
		bool removed = _bookmarkManager?.TryRemove(CurrentUser!.Id, resource.Id) ?? false;

		if(removed) {
			Snackbar.AddSuccess($"Bookmark removed from \"{resource.Title}\"");
			_bookmarkedResourceIds!.Remove(resource.Id);
		}else {
			Snackbar.AddWarning($"Bookmark could not be removed. Please try again later.");
		}
		return removed;
	}

	protected bool AddBookmark(Resource resource) {
		bool added = _bookmarkManager?.TryAdd(CurrentUser!.Id, resource.Id) ?? false;

		if(added) {
			Snackbar.AddSuccess($"Bookmark added to \"{resource.Title}\"");
			_bookmarkedResourceIds!.Add(resource.Id);
		}else {
			Snackbar.AddWarning($"Bookmark could not be added. Please try again later.");
		}
		return added;
	}

	protected void LoadBookmarkedResources() {
		if(CurrentUser is null) {
			return;
		}
		_bookmarkedResourceIds = new(CurrentUser
			.Bookmarks
			.Select(x => x.ResourceId));
	}

	protected string GetBookmarkIcon(Resource resource) {
		return _bookmarkedResourceIds is not null
			&& _bookmarkedResourceIds.Contains(resource.Id)
				? Icons.Material.Filled.Bookmark
				: Icons.Material.Outlined.BookmarkBorder;
	}

	protected ProgressStatus GetUserProgressStatus(Resource resource) {
		var progress = CurrentUser?.Progresses.FirstOrDefault(x => x.ResourceId == resource.Id);

		if(progress is null)
			return ProgressStatus.None;
		return progress.Status; ;
	}
}
