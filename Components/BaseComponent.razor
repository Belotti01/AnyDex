@using System.Diagnostics
@using Microsoft.Extensions.Localization
@typeparam TSelf
@inherits MudComponentBase
@implements IDisposable

<!-- Injected Services -->
@inject SignInManager<User> _signInManager
@inject DateTimeLocalizer _clientDateTime
@inject IDialogService _dialogService
@inject IStringLocalizer<TSelf> _local

@code {
    protected bool _disposed { get; private set; }

    // Cascading Parameters inherithed from the layout
    [CascadingParameter, NotNull]
    public MudDialogProvider? DialogProvider { get; set; }
    [CascadingParameter, NotNull]
    public MudThemeProvider? ThemeProvider { get; set; }
    [CascadingParameter, NotNull]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    // Encapsulate injected data to abolish overwrite
    /// <inheritdoc cref="SignInManager{TUser}.UserManager"/>
    public UserManager<User> UserManager => SignInManager.UserManager;
    public SignInManager<User> SignInManager => _signInManager;
    public DateTimeLocalizer ClientDateTime => _clientDateTime;
    public IDialogService DialogService => _dialogService;
    public IStringLocalizer<TSelf> Local => _local;

    /// <summary>
    /// Logs' output stream accessor object for components.
    /// </summary>
    [Inject, NotNull]
    public ILogger<TSelf>? Logger { get; private set; }

    [Inject, NotNull]
    public ISnackbar? Snackbar { get; private set; }

    protected override void OnInitialized() {
        base.OnInitialized();

        TryValidateInitializationValues();
    }

    public virtual bool TryValidateInitializationValues() {
        bool isCurrentFieldInvalid;
        bool isAnyFieldInvalid = false;

        // Check Logger first, as other errors can't be signaled if it's not set
        if(Logger is null) {
            if(Debugger.IsAttached) {
                throw new NullReferenceException($"Logging can't be computed due to field '{nameof(Logger)}' of type '{typeof(ILogger).Name}' having no value.");
            }
            return false;
        }

        List<(object obj, string name)> objects = new() {
            { new(AuthenticationStateTask, nameof(AuthenticationStateTask)) },
            { new(SignInManager, nameof(SignInManager)) },
            { new(Snackbar, nameof(Snackbar)) },
            { new(DialogService, nameof(DialogService)) },
            { new(Local, nameof(Local)) }
        };

        foreach(var obj in objects) {
            if(isCurrentFieldInvalid = obj.obj is null) {
                Logger.LogCritical("Required Base Component field '{name}' has no set value.", obj.name);
            }
            isAnyFieldInvalid &= isCurrentFieldInvalid;
        }

        return isAnyFieldInvalid;
    }

    protected override bool ShouldRender() {
        // Prevent Null exception when an async method invokes StateHasChanged() after the component has been disposed of
        return base.ShouldRender() && !_disposed;
    }

    public IDialogReference? ShowDialog<TDialog>(string title, bool fullScreen, DialogParameters? parameters = null) where TDialog : ComponentBase {
        DialogOptions options = new() {
                CloseButton = true,
				CloseOnEscapeKey = true,
				FullScreen = fullScreen,
				FullWidth = fullScreen,
                MaxWidth = MaxWidth.ExtraLarge
			};

        var dialog = DialogService.Show<TDialog>("Materials", parameters, options);
        return dialog;
    }

    public IDialogReference? ShowDialog<TDialog>(string title, MaxWidth maxWidth = MaxWidth.Large, DialogParameters? parameters = null) where TDialog : ComponentBase {
        DialogOptions options = new() {
                CloseButton = true,
				CloseOnEscapeKey = true,
				FullScreen = false,
				FullWidth = true,
                MaxWidth = maxWidth
			};

        var dialog = DialogService.Show<TDialog>("Materials", parameters, options);
        return dialog;
    }

    public void Dispose() {
        _disposed = true;
    }

}