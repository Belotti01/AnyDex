@using System.Diagnostics
@typeparam TSelf
@inherits MudComponentBase

<!-- Injected Services -->
@inject SignInManager<User> _signInManager
@inject DateTimeLocalizer _clientDateTime
@inject DialogService _dialogService

@code {
    // Cascading Parameters inherithed from the layout
    [CascadingParameter, NotNull]
    public MudDialogProvider? DialogProvider { get; set; }
    [CascadingParameter, NotNull]
    public MudThemeProvider? ThemeProvider { get; set; }
    [CascadingParameter, NotNull]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    /// <inheritdoc cref="SignInManager{TUser}.UserManager"/>
    public UserManager<User> UserManager => SignInManager.UserManager;
    public SignInManager<User> SignInManager { get => _signInManager; }
    public DateTimeLocalizer ClientDateTime { get => _clientDateTime; }
    public DialogService DialogService { get => _dialogService; }

    /// <summary>
    /// Logs' output stream accessor object for components.
    /// </summary>
    [Inject, NotNull]
    public ILogger<TSelf>? Logger { get; private set; }

    [Inject, NotNull]
    public ISnackbar? Snackbar { get; private set; }

    protected override void OnInitialized() {
        base.OnInitialized();

        TryValidateInitializationValues();
    }

    public string Localize(string text) {
        // Unimplemented for now
        // Might be unneeded, depends on how MudBlazor handles Localization
        return text;
    }

    public virtual bool TryValidateInitializationValues() {
        bool isCurrentFieldInvalid;
        bool isAnyFieldInvalid = false;

        // Check Logger first, as other errors can't be signaled if it's not set
        if(Logger is null) {
            if(Debugger.IsAttached) {
                throw new NullReferenceException($"Logging can't be computed due to field '{nameof(Logger)}' of type '{typeof(ILogger).Name}' having no value.");
            }
            return false;
        }

        if(isCurrentFieldInvalid = AuthenticationStateTask is null)
            LogNullRequiredField(nameof(AuthenticationStateTask));
        isAnyFieldInvalid &= isCurrentFieldInvalid;

        if(isCurrentFieldInvalid = SignInManager is null)
            LogNullRequiredField(nameof(SignInManager));
        isAnyFieldInvalid &= isCurrentFieldInvalid;
        
        if(isCurrentFieldInvalid = Snackbar is null)
            LogNullRequiredField(nameof(Snackbar));
        isAnyFieldInvalid &= isCurrentFieldInvalid;

        if(isCurrentFieldInvalid = DialogService is null)
            LogNullRequiredField(nameof(DialogService));
        isAnyFieldInvalid &= isCurrentFieldInvalid;

        return isAnyFieldInvalid;
    }

    protected void LogNullRequiredField(string fieldName) {
        Logger.LogCritical("Required Base Component field '{fieldName}' has no set value.", fieldName);
    }

}