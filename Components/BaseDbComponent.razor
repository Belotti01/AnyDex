@inherits BaseComponent<TSelf>
@typeparam TSelf

@code {
	/// <summary>
	/// Components' database accessor object.
	/// </summary>
	[Inject, NotNull]
	protected AnyDexDb? DbContext { get; private set; }

	public User? CurrentUser { get; private set; }


	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		// Eager-load the currently logged-in user
		CurrentUser = await GetCurrentUserAsync();
	}

	/// <summary> Lazy-load the <see cref="CurrentUser"/>, or retrieve it if it's already cached. </summary>
	private async Task<User?> GetCurrentUserAsync() {
		var auth = await AuthenticationStateTask;

		if(auth.User.Identity is null) {
			return null;
		}

		User? user = await UserManager.GetUserAsync(auth.User);
#if DEBUG
		string username = user?.UserName ?? "<Guest>";
		Logger.LogDebug("Current User: {username}", username);
#endif
		return user;
	}

	public override bool TryValidateInitializationValues() {
		bool isAnyFieldInvalid = base.TryValidateInitializationValues();
		bool isCurrentFieldInvalid;
		if(Logger is null) return false;	// Can't log errors. 
											// Done after calling the overrided method to properly handle Logger null value in 
											// the base method.


		if(isCurrentFieldInvalid = DbContext is null)
			LogNullRequiredField(nameof(DbContext));
		isAnyFieldInvalid &= isCurrentFieldInvalid;

		return isAnyFieldInvalid;
	}
}
