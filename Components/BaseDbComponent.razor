@using Microsoft.EntityFrameworkCore
@inherits BaseComponent<TSelf>
@typeparam TSelf

@code {
	[Inject, NotNull]
	protected IDbContextFactory<AnyDexDb>? DbContextFactory { get; private set; }
	/// <summary>
	/// Lazy-initialized component's shared database accessor object.
	/// </summary>
	protected AnyDexDb DbContext => _dbContext.Value;
	private Lazy<AnyDexDb> _dbContext { get; set; } = null!;	// Should never be null as long as the OnInitialized is called

	protected override void OnInitialized() {
		base.OnInitialized();
		_dbContext = new(DbContextFactory.CreateDbContext());
		TryValidateInitializationValues();
	}

	/// <summary> Load the <see cref="CurrentUser"/>'s data. </summary>
	protected async ValueTask<User?> GetCurrentUserAsync() {
		var auth = await AuthenticationStateTask;

		if(auth.User.Identity is null) {
			return null;
		}

		User? user = await UserManager.GetUserAsync(auth.User);
#if DEBUG
	string username = user?.UserName ?? "<Guest>";
	Logger.LogDebug("Current User: {username}", username);
#endif
		return user;
	}

	public override bool TryValidateInitializationValues() {
		bool isAnyFieldInvalid = false;
		bool isCurrentFieldInvalid;
		if(Logger is null) return false;	// Can't log errors. 
											// Done after calling the overrided method to properly handle Logger null value in 
											// the base method.

											
		if(isCurrentFieldInvalid = DbContextFactory is null)
			LogNullRequiredField(nameof(DbContextFactory));
		isAnyFieldInvalid &= isCurrentFieldInvalid;
		return isAnyFieldInvalid;
	}
}
