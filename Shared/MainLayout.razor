@using Microsoft.AspNetCore.Identity
@inherits LayoutComponentBase

<!-- Service Providers: Hidden components that allow their usage over any page -->
<MudThemeProvider @ref="ThemeProvider" Theme="Theme" @bind-IsDarkMode="IsDarkModeEnabled" />
<MudDialogProvider @ref="DialogProvider" CloseOnEscapeKey="true" />
<MudSnackbarProvider />

<!-- Page Layout -->
<MudLayout>
    <!-- Top Menu -->
    <MudAppBar Elevation="1">
        <!-- Left Side -->
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">AnyDex Project</MudText>
        <MudSpacer />
        <!-- Right Side -->
        <MudIconButton Href="https://github.com/Belotti01/AnyDex" Target="_blank" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" />
        <MudToggleIconButton @bind-Toggled="IsDarkModeEnabled" ToggledIcon="@Icons.Material.Filled.DarkMode" Icon="@Icons.Material.Filled.LightMode" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>

    <!-- Side Menu -->
    <MudDrawer @bind-Open="IsDrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavBarMenu />
    </MudDrawer>

    <!-- Page Content -->
    <MudMainContent>
        @Body
        <!-- "Scroll to Top" Button -->
        <MudScrollToTop>
            <MudFab Color="Color.Default" 
                    Icon="@Icons.Filled.ArrowCircleUp" 
                    IconColor="Color.Info"  
                    IconSize="Size.Large"/>
        </MudScrollToTop>
    </MudMainContent>
</MudLayout>
@code {
    [NotNull]
    private MudThemeProvider? ThemeProvider { get; set; }
    [NotNull]
    private MudDialogProvider? DialogProvider { get; set; }
    private MudTheme Theme { get; set; } = new();
    // Default to TRUE to avoid throwing a flashbang to dark-mode user
    private bool IsDarkModeEnabled { get; set; } = true;
    private bool IsDrawerOpen { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender) {
            bool systemPreference = await ThemeProvider.GetSystemPreference();
            // Skip re-rendering if nothing actually changes
            if(IsDarkModeEnabled != systemPreference) {
                IsDarkModeEnabled = systemPreference;
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task ShowLoginDialog() {
        //TODO
    }

    void DrawerToggle() {
        IsDrawerOpen = !IsDrawerOpen;
    }
}